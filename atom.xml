<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小助助的精神實驗室]]></title>
  <link href="http://Ichi1234567.github.com/atom.xml" rel="self"/>
  <link href="http://Ichi1234567.github.com/"/>
  <updated>2012-06-26T11:19:34+08:00</updated>
  <id>http://Ichi1234567.github.com/</id>
  <author>
    <name><![CDATA[小助助]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我生命中的JS和OO]]></title>
    <link href="http://Ichi1234567.github.com/others/2012-06-09/new-post/"/>
    <updated>2012-06-09T00:00:00+08:00</updated>
    <id>http://Ichi1234567.github.com/others/2012-06-09/new-post</id>
    <content type="html"><![CDATA[<p>ㄜ~其實…原本打算接著上次的話題，繼續寫一下canvas系列的（詳見 <a href='http://ichi1234567.github.com/blog/2012/06/07/new-post/'>[canvas]上的事件 &#8212; (1)</a>、 <a href='http://ichi1234567.github.com/blog/2012/06/06/new-post/'>[canvas]上的事件 &#8212; (2)</a>） 可是，接下來這個，可能會講的落落長耶~ &gt; 3&lt; 有點點懶~so~~~~~~ XDDDD 剛好對JS和OO突然有fu，所以、決定來紀錄一下 這個突如其來的感想吧~</p>

<p>對、我很任性~ XDDD 想到、不做會很彆扭歐~ (扭扭) 所以、我一定要認真的紀錄一下。</p>
<!-- more -->
<p>嗯、回顧一下年輕的歲月… Q 口Q (老了、真的老了~都到了回顧的時候了~哭)</p>

<p><strong>唸書時期</strong>歷經了幾個小小的階段：<br /></p>

<ul>
<li>
<p>剛學C的時候、呆呆傻傻的除了loop、if else…這類的ㄜ、所謂…結構化的語法，平鋪直敘的從上到下寫程式~什摸都不會用 。學到了OO、還是有著『OO、OO是啥~OO好煩、我不要OO』的這樣的青澀時期~ Q 口Q 其實是根本不太會使用OO。</p>
</li>

<li>
<p>後來、學了C++、慢慢的接觸到~很像知道了什摸叫做『OO』，那時候就突然的像走火入魔一樣、除了OO其他什摸都不要， 不用OO的也一定要OO一下，自我感覺良好的想著『多好阿~我的code可以reuse&#8230;』</p>
</li>

<li>
<p>緊接著、由於修課的關係，接觸到了組合語言這類的，再結合上logic design，突然~有種驚為天人的感覺~邁入了我無時 不刻都想要用 bit 運算的奇怪心態&#8230;||| 好吧~這個真的有點難想像，可是、看著自己的程式結合 bit 運算，寫出來的 結果，就像一幅邏輯線路圖一樣的感覺、很好~ 囧 (&lt;&#8212; 我想、這種感覺不是每個人都會有的~) 我現在，其實還是蠻喜 歡這種感覺的，突然想到就要來一下&#8230;|||</p>
</li>

<li>
<p>再後來、遇到了可以說是我至今的最愛的一種語言…LISP，也許很多人會討厭使用它的時候的那些括號，總覺得看的眼花， 總覺得，它的使用上，總讓人匪夷所思…『為什摸可以這樣寫』、『為什摸』、『為什摸』…相信應該有不少人類在使用 的時候對它有很多的疑問。很幸運的是、我在學的時候，很像就理所當然的認為…沒錯、就是這樣…一拍即合~ XDD</p>

<p>也許、現在陸陸續續接觸到蠻多語言的，像是js、python這類的，也還蠻喜歡的啦~並不會討厭或排斥…不過、貌似我最愛 的LISP的地位似乎從來沒有動搖過耶~即使、我其實沒有機會用到它~ Q 口Q 頂多、偶爾翻翻…(現在應該墮落到…除了大概 看得懂、就不知道怎摸寫的地步了吧~ XDD 語法什摸的、都忘了差不多了的捏~)</p>
</li>
</ul>

<p>好~~~歷經了那些，由於工作的關係、真正的踏入JS的大門，唸書的時候、也曾經短短的碰過…1個月(?)，好吧~那時候覺得&#8230; JS是個奇怪得東西~然後、因為工作的關係在學習的時候、仍然覺得它令人匪夷所思…不懂、就是不懂~翻了很多介紹、總覺得 JS真的好怪，然後、跟著大家一起討厭JS了。真的~我討厭過JS~ XDDD|||</p>

<p>然後、歷經了一番的實驗與磨練(真的很感謝、周遭的同事願意讓我實驗一些奇怪的東西~XDD)，所以、我就從各個角度去實 驗JS，就跟以前實驗C/C++還有其他語言一樣…從各種我突然冒出來的角度去實驗它，而且，到處去挖別人家的code&#8230;||| 期間、也發現了大家說『JS也可以OO』的各種寫法(&lt;&#8212;JS和OO終於有關係了~ w) 於是又開始不遺餘力的實驗起、JS和OO的 關係…。</p>

<p>(也許、有機會，我突然去想到可以很不認真的紀錄一下以前實驗JS的成果歐~ XDD 雖然、也許結果大家會覺得很怪、 我的結論也許跟網路上得人類說得都不太一樣~ Q 口Q||| 我也懷疑過自己的結論、可是，最後我還是決定、好吧~相信自己)</p>

<p>總之、有一陣子，就跟小朋友拿到新玩具一樣，一定要把它玩到膩為止，寫JS的時候、一定要想一下…這個可不可以OO阿~OO 好棒、OO萬歲、OO你太神奇了~</p>

<p>好~~~過了為期短短的不到2個月…(可能1個月都沒有歐~ = . .= 我好糟糕)，我厭煩了~||| 啥OO阿~ JS跟OO一點都不搭、就 …該怎摸說呢~我想、應該是因為語言特性的關係，雖然JS可以模擬OO (&lt;&#8212; 大部分的人都會說<strong>實做</strong>、不過，我比較偏向 的說法是<strong>模擬</strong>，這個貌似又可以開一篇呢~ 我又挖坑了~ Q 口Q||) 在我發現它們不搭的時候，我很阿莎力的、放棄了 JS和OO的磨合，因為、JS模擬OO的寫法、其實…不太能說服我耶~那是一種fu啦~所以、現在就不太強求在JS環境下、也堅持 非OO不可的寫法了。偶爾還是會用啦~畢竟、有時候真的還蠻好用的~ XDDD</p>

<p>是說…從唸書開始一直寫程式到現在…其實也蠻久了的歐~ = . .= 雖然有過對OO著迷的時期，不過、目前來說…當我聽到有人 跟我說『OO多好嘟多好~』這類的言論，雖然、可以理解啦~可是、真的好想潑冷水歐~(&lt;&#8212; 欠揍耶~真的…) 其實、OO真的沒 有想像中的好~因為、它的使用方式會讓整個想法有點…唔、怪~ XDD 所以、還是在適當的時機用比較好~(&lt;&#8212; 一整個廢話)</p>

<p>好、也許有人會好奇為什摸我會覺得怪…小小的舉個例子(這邊不討論哪種語法歐~就是、採取意思到了就好…)：</p>

<p>- 例子：假定、你定義了房子物件。 * 也許、會有人採用這樣的房子OO寫法： <pre><code>
		x = new Building(); // 房子的instance
		x.openDoor(); // 房子的門打開了
		</code></pre></p>

<p>也就是說、建立一個房子、然後房子的門打開了，這樣的寫法、其實也沒啥不對啦~你看歐 假如我有很多個房子、這樣的寫法還蠻不賴的耶~說真的…只要定義好一次Building這個class、然後、以後就可以 偷懶了、真的很好~。</p>

<p>那…為什摸我會覺得怪咧~這個例子也許誇張了一點啦~ XDDD 它其實、是有點…好吧~ 這摸說好了、如果它套入了以前 唸書的時候學到的<strong>『擬人法』</strong>那…我就不會覺得怪了，不然、真的很怪阿~房子怎摸會開門…囧 就很怪~ XDD 可是、 我寫程式的時候、不會想到擬人法阿~所以、我就覺得很怪…</p>

<ul>
<li>如果以可能蠻多人都有興趣的遊戲的情況來說：<br /> 勇者有hp、mp、攻擊力這類的屬性，另外也有attack這類的…唔、手段<br /> 怪物同樣也有這些東西…<br /> 因此、可以把它們抽出來…用一個叫做、creature的class封裝起來，定義好它們的 default 運作、在產生這些instance的 時候就可以輕易的使用它們。在這樣的情況下，我就會覺得 OO 還蠻不賴的。</li>
</ul>

<p>好~~這樣、不知道有迷有清楚為什摸我會覺得 OO 其實是個比較偏向在狹義一點的使用了。原因大概就是這樣…。</p>

<p>嗯嗯、下個結論就結束吧~！！ 所以、我要說得是、在很認真的實驗過許多語言後，除了語言的本性以外、其實在某一方面 、OO 並不是真的那摸好~ 當然、也沒有真的哪個語言最好、哪種寫法最讚啦~ 這邊並沒有要貶低 OO，只是…要看用在哪邊， 就像…我寫assembly&#8230; = . .= 最好是會用functional language的特性下去兜啦~那也太蝦了~</p>

<p>[批註]<br /> 其實、我也不知道我這篇到底重點在哪耶~(汗|||) 就是、心裡面的 OO 魂突然冒出來、讓我揍他(?)、可是又覺得很對不起 canvas、所以、讓JS出來湊湊熱鬧的&#8230;感覺吧~ 囧</p>

<p>以上&#8230;</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[canvas]上的事件 --- (2)]]></title>
    <link href="http://Ichi1234567.github.com/canvas/2012-06-07/new-post/"/>
    <updated>2012-06-07T00:00:00+08:00</updated>
    <id>http://Ichi1234567.github.com/canvas/2012-06-07/new-post</id>
    <content type="html"><![CDATA[<p>今天、實驗進度大躍進~ XDD 雖然勒~ = 口= 唉唉唉~算算了、不提了~ &gt; 3&lt; 既然有進度、那就接著延續昨天的話題、canvas 事件吧~！！好~記得昨天辛酸史講到了<strong>isPointInPath</strong>、今天就接下去紀錄…嗯~今天就來歸納一下canvas如何綁定事件吧~ w</p>
<!-- more -->
<p>因為isPointInPath有一些使用上的麻煩、所以…(如果沒記錯的話~w)就有了以下的幾種方法：</p>

<ul>
<li>
<p>使用<strong>svg</strong>：<br /> 就是因為這樣…所以~用了svg，其實就可以不用canvas了~XDD 是說、值得一提的是，有不少讓原本不能用canvas的瀏覽器支援 的方法、都不約而同的利用svg。像是…<a href='http://excanvas.sourceforge.net/'>excanvas</a> 記得大部分的版本都是使用svg喇~ 可是、我把名字忘光光了~囧</p>
</li>

<li>
<p>使用<strong>flash</strong>：<br /> 這個方法比較不常見耶~說真的、而且run起來聽說也比較慢。可是咧~印象中我挖到的這個 <a href='http://burzak.com/proj/fxcanvas/'>fxCanvas</a>在實做canvas的功能上、的確有比較完整呢~不知道是好還是壞~ XDD 可是、我私心的並不喜歡flash~ Q ^Q</p>
</li>

<li>
<p>使用<strong>透明image圖層</strong>：<br /> 這個方法、其實就是使用了<a href='http://www.w3schools.com/tags/tag_area.asp'>area</a>這個html的tag，在圖形上、利用area 紀錄好shape、在去監聽事件。是不錯用、對於polygon、circle這類的都不錯，就是polyline稍嫌麻煩些。</p>
</li>

<li>
<p>使用<strong>DIV</strong>：<br /> 而上述的那些方法的確都可以監聽個別圖形的事件、可是~有時候並不需要那摸精細、畢竟…上述的方法都不是canvas的原生 方法，算起來就…肯定比較花時間啦~那…使用div的方法、就是說…只要大概的抓到它需要觸發事件的範圍就行了。其使用 的範疇大概就是…唔~最常見的大概就是…在…<a href='http://www.google.com/doodles/finder/2012/All%20doodles'>google doodle</a> 裡、大家可以發現不少互動式的案例。它們都有一個共通點、就是…需要觸發事件的地方不多、而且單純，也許就是mouseover 某個物體的時候、發生了某某事情。或者是click的時候、做了balabala動作。</p>

<p>其實、並不是每一種效果都需要非常精細的事件監聽和觸發~所以、我個人還蠻喜歡這種方法的啦~ XDDD 很方便偷懶阿~只要在產生圖形的時候，在需要的時候，順便產生對應大小的div，還有設定好anchor position， 接下來在圖形畫上去的順手append上去，接下來就可以邪惡的監聽事件了，在圖形有所變化的時候、也只需要修正大小 或位置…就完成了。說起來真的是非常的方便呢~ 這個部份、可以參考 google doodle的<a href='http://www.google.com/logos/lem/'>機器人</a>的 <a href='https://code.google.com/p/stanislaw-lem-google-doodle/'>source code</a> 真的很讚呢~裡面可以看到很多邪惡的小 細節、太邪惡、太邪惡、真的是太邪惡了啦~ XDDD 即使看過再看、都還是能帶給我驚喜哩~</p>

<p>我喜歡有驚喜的code~太感謝製作團隊無私的分享了。希望我哪天也可以邪惡一把。(&lt;&#8212; 又在做白日夢了~|||)</p>
</li>
</ul>

<p>雖然、還有一個<strong>超~~~~級邪惡</strong>的方法，不過、今天就到這邊吧~ 接下的那個方法、雖然概念很簡單、不過，實做上需要 一點點小技巧~ XDD 而且、其實我還在實驗啦~我想要弄一個自己順手的版本…不過，有人就是使用我下次要講的技巧歐~ 就是這個<a href='http://www.createjs.com/#!/EaselJS'>easelJs</a> 好~~那就這樣吧~ 收工~ w</p>

<p><strong>To Be Continued&#8230;&#8230;</strong></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[canvas]上的事件 --- (1)]]></title>
    <link href="http://Ichi1234567.github.com/canvas/2012-06-06/new-post/"/>
    <updated>2012-06-06T00:00:00+08:00</updated>
    <id>http://Ichi1234567.github.com/canvas/2012-06-06/new-post</id>
    <content type="html"><![CDATA[<p>canvas的事件相關的部份、一直以來都是我心中永遠的痛~ (←明明就還很嫩、還在永遠些啥~ XDDD) 我不太喜歡目前自己 用來監聽canvas上、觸發圖形事件的方法。就~~其實很好用啦~可是、就彆扭咩~(扭扭扭)</p>

<p>其實…這個部份~某部份還在實驗~(大卡關阿~ Q ^Q) 然後、這個想法，在還沒有看到別人實做出來的時候，一直有個疑問， 不知道這樣的想法、會不會很耗資源，可是、又很懶的弄~然後、在這遊戲引擎如雨後春筍般冒出來的情況下~挖了一些出來 研究了一下。<a href='http://enchantjs.com/en/?s=en'>enchant</a>、<a href='http://entityjs.com/'>entityjs</a>、 <!-- more --></p>

<p><a href='http://www.createjs.com/#!/EaselJS'>easelJs</a>、還有最近好像還蠻多人提起的 <a href='https://github.com/mrdoob/three.js/'>three.js</a> (←目前腦海有印象的就這幾個啦~很像還有不少捏)也去挖到了之前 google doodle的<a href='http://www.google.com/logos/lem/'>機器人</a>的 <a href='https://code.google.com/p/stanislaw-lem-google-doodle/'>source code</a></p>

<p>很認真的翻了很久~眼睛都看花了~ Q ^Q 在好心的<a href='http://blog.blackbing.net/'>Bingo</a>的指引下、發現了EaselJS、其實 不是我迷有看過它~ XDDD 是…我那時候翻了太多、把它忘記了~ XDDD</p>

<p>就這樣…我就邁入了~不歸路… Q 口Q 真的~我覺得我現在好糟糕…一定有XX強迫症了~沒救了~哭…。這個系列、將介紹我在canvas 上的心路歷程&#8230;. Q ^Q 之一。</p>

<p>好~趕快進入正題…XDDDDD 前言真的太長了呢~</p>

<p>雖然、canvas是個html的tag、也可以觸發事件，不過…它就跟一般的html元素一樣，並沒有辦法去觸發畫在canvas上面的 特定內容，嗯嗯嗯…就canvas這個字面上的意思來看，就是『畫布』咩~畫布…當然是屬於靜態的…畫上去就結束了~。</p>

<p>所以、為了達成大家的願望…其實canvas有個method就是 <a href='http://www.html5.jp/canvas/ref/method/isPointInPath.html'>isPointInPath</a> 其實…可以拿來用啦~雖然它有幾個 堪稱致命的小瑕疵：</p>

<ul>
<li>
<p>最致命的當然就是…為了兼容不支援canvas各家瀏覽器(其實就是那一個~ Q ^Q)、不得不使用像是 <a href='http://excanvas.sourceforge.net/'>excanvas</a>、<a href='http://burzak.com/proj/fxcanvas/'>fxCanvas</a>這類的~很像還有幾個 可是我也忘記名字了…想不起來~ XDD 可是、不管這些製作的多摸的優良~總是會有一些功能還沒有被實做出來… 很光榮的<strong>isPointInPath</strong>名列其中~ Q 口Q isPointInPath掰掰~(揮揮手)</p>
</li>

<li>
<p>接下來另一個致命的就是…請注意它的名字<strong>isPointInPath</strong>，我知道…大家一定都迷有注意到~ 唔、好吧~大多數的人類 應該是迷有注意到這件事isPoint<strong>InPath</strong>。是的，這個方法是去判斷一個點有沒有 <strong>in</strong> Path。那…然後呢~ Q 口Q 讓 人傷心的事情就是在這裡發生了。在canvas裡面，嗯 我想也許可以這摸說啦~也許…這部份是屬於我個人的理解歐~我沒有 仔細的去看相關的內容，有問題就…(搔搔臉) 就是那樣~(好~~~~~~~回正題)</p>

<ul>
<li>code A <pre><code>ctx.beginPath();
	ctx.moveTo(x1, y1);
	ctx.lineTo(x2, y2);
	ctx.lineTo(x3, y3);
ctx.closePath();
ctx.fill();
</code></pre></li>

<li>code B <pre><code>ctx.beginPath();
	ctx.moveTo(x1, y1);
	ctx.lineTo(x2, y2);
	ctx.lineTo(x3, y3);
ctx.stroke();
</code></pre></li>
</ul>

<p>上面那兩段就差在<strong>closePath</strong>，然後、有close的那個…會成為一個封閉圖形…阿~迷有錯…所以、<strong>isPointInPath</strong>在 第一個會有作用、第二個就一點用都沒有了~它用在polyline上、就算你on在線上…也都會給你回傳false的…也~~~~~就是說 isPointInPath只能用在封閉圖形，其~~~實也不是不能用在polyline上啦~只是、很麻煩捏~ = &#8221;&#8221;&#8220;= 我不想把自己搞得很 頭大，excanvas那類的…又不支援~ XDDDD 就算算囉~</p>
</li>
</ul>

<p>基於以上兩種理由…canvas原生的method<strong>isPointInPath</strong>掰~！！</p>

<p>好~因為…我累了~ = . .= 所以，這篇就先到這裡~ XDDDD <strong>isPointInPath</strong> 到此告一段落。</p>

<p><strong>To Be Continued&#8230;&#8230;</strong></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[雜談 - 選擇jekyll Bootstrap的理由]]></title>
    <link href="http://Ichi1234567.github.com/others/2012-06-05/new-post/"/>
    <updated>2012-06-05T00:00:00+08:00</updated>
    <id>http://Ichi1234567.github.com/others/2012-06-05/new-post</id>
    <content type="html"><![CDATA[<p>阿~這篇真的是個雜談~。</p>

<p>跟什摸都沒關西、是個一點點都不正經的文章~ w (雖然、標題看起來很像還蠻正經的、可是內容不太正經捏。)</p>
<!-- more -->
<p>嗯．唸書的時候…從BLOG興起，就陸陸續續的用過不少牌子了，可是、其實我沒有用順手的耶~ = &#8221;&#8221;&#8220;= 為什摸咧~ 原因如下：</p>

<p>- 因為每次都要登入，什摸東西都要登入了才可以用 &#8212;&#8211;&gt; 好麻煩、登入真的是件讓我很不喜歡的事情，沒有編輯完，雖然 有提供暫時存檔的功能，可是、我總是覺得很彆扭呢~我不喜歡。</p>

<p>- 因為某人有某種程度上的操作障礙、我要用很~~~長的時間去習慣和熟悉 &#8212;&#8211;&gt; 不喜歡捏。雖然、有很多東西有提供設定 ，可是、不知道為什摸，我就是迷有辦法一次就接收那摸多的東西，每次都讓我看到瞳孔放大~我不喜歡。</p>

<ul>
<li>因為每次看到網路上有人提供放在BLOG上的小東西，就想放上去 &#8212;&#8211;&gt; 這個、基本上就會遇到XX牌平台不支援這個，OO牌 又不支援那個，可是又想玩…那~就要申請好多個、可是，久了就又膩了~不喜歡。</li>
</ul>

<p>- 版面上的廣告有好多捏 &#8212;&#8211;&gt; 雖然、因為人家設計了好方便平台又免費給大家使用、真的很好~可是、我真的很不喜歡自己的領地 有不屬於自己的東西。</p>

<ul>
<li>
<p>久了~總會有…我想拿掉這個、我想換掉那個~這邊都不要…balabala的來個乾坤大挪移 &#8212;&#8211;&gt; 一般的平台、不會允許大家 做這種事情的吧~</p>
</li>

<li>
<p>我很喜歡 Knuth 教授的一些看法，如果迷有記錯、應該是他說的話吧~嗯嗯、意思大概是說『人類討厭數學的原因、一定 是沒有看過長得很漂釀的算式。』真的捏~我很慶幸，在我年紀還小的時候，教我的數學老師們、基本上是沒有讓我看到 醜醜的算式啦~有醜醜的也都被我忘了~ XDD 所以、一聽到這個很像可以輸入latex~我一整個就大心了~ &gt; ////&lt; Knuth 教授萬歲、JB萬歲、git萬歲、github萬歲~歐耶~~~~~ 不能很容易的就轉換出美美的算式、一直是我心中的痛捏。所以、 有這個真的是太好了~(大心)</p>
</li>

<li>
<p>我最近剛好很喜歡git、覺得~git好有趣歐~ github的吉祥物們(那個算吉祥物吧~！？)好可愛歐~ &#8212;&#8211;&gt; 我一整個被他們 俘虜了，他們真的好可愛歐~(大心) 所以、我一定要支持它~ (//v//)╭♥♥ XX品牌們、不知道會不會後悔迷有推出吉祥物。</p>
</li>
</ul>

<p>基於上述的種種原因，我~~~拋棄了XX平台們，投入了這個的懷抱…很慶幸，因為自己的懶惰(w)，可以說、完~~~全沒遇到強 者們遇到的問題…(都空空的迷有文章、是要搬些什摸咧~XDD)</p>

<p>雖然、一定有人會覺得我的原因很蝦啦~ = &#8221;&#8221;&#8220;= 上面那些我覺得麻煩的原因，應該有很多人都覺得~『阿人家幫你做好好的 、還在覺得麻煩些什摸阿~有比你做一個麻煩咪~』 可是、人家就覺得麻煩嘛~(扭扭) 而且、不有趣耶~</p>

<p>好~~其實、今天算是個…還蠻特別的日子吧~ w 就…po個一篇、順便紀錄一下為什摸搬到這邊的原因囉~ w 希望~這邊可以讓我 玩很久很久很~~~~久。</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[運算判斷]]></title>
    <link href="http://Ichi1234567.github.com/math/2012-05-15/cond/"/>
    <updated>2012-05-15T00:00:00+08:00</updated>
    <id>http://Ichi1234567.github.com/math/2012-05-15/cond</id>
    <content type="html"><![CDATA[<p>一些看不起眼的小東西、很有可能是個十分好用的小東西~ = =++ (←就會賣弄小聰明~XDD)</p>

<p>一直以來、我都不喜歡if else，總覺得…很煩、可是，又很像非用不可…。寫到後來…總是會不知道寫到了什摸地方去了、 然後…其實又有很多一樣的東西一直在重複、就只是差在、所謂的…方向略有不同。然後、code的內容邁入無窮迴圈、不 停的copy、不停的paste、不停的、不停的、就忘了自己在幹麻…。我記性不好、腦袋不好~所以常常忘了重要的東西。</p>
<!-- more -->
<p>所以，這時候、就一定要用一下<strong>邪惡</strong>的方法、讓這些判斷俐落一點，不是完全不用判斷了歐、只是…讓它俐落一點而 已。雖然、這樣的寫法，不熟的人類一開始可能會有點點難理解…可是，我還真的離不開這樣的寫法了捏~ w 光是、只要 在適當的地方用一下、code可以從少一半起跳…我就被誘惑了~ XDDD</p>

<p>廢話不多說、來個簡單的例子…</p>

<p>比如、在溫度&gt;27度的時候、空調會降低溫度，反之…升溫好了…(←例子嘛，爛就算了~ w) 這時候、我大概就會用類似這樣的的寫法…。</p>

<pre><code>sgn = (temperature - 27 &gt; 0) ? (1) : (-1)
setTemperature(sgn * delta)</code></pre>

<p>也許、這個還看不太出效果來、還是有很多人會用這種寫法的咩…所以、再來一個</p>

<p>假如、下述的關係 a &lt; x &lt; b ， 符合則將 p[ ] 加入container，反之&#8230;從container中移除</p>

<p>傳統作法大概是這樣</p>

<pre><code>if (x &gt; a &amp;&amp; x &lt; b)
    for (i=0; p[i]; i++)
	    container.insert(p[i])
else
    for (i = 0; p[i]; i++)
	    container.remove(p[i])</code></pre>

<p>當然、上述作法想把判斷包在loop裡面也是可行的歐~也沒啥標準作法喇~只是一般人類應該會採用上述類似的作法。</p>

<p>是說…我大概就會這樣寫… (←硬生生的少了一半) 以這種作法寫、包過2層、可以硬生生的、只剩下一半的一半、1\/4的code~ XDD 一整個、爽阿~ 哈哈哈 看code可以不用翻頁、是一件多摸幸福的事情。</p>

<pre><code>method = ((x - a)*(x - b) &lt; 0) ? (&quot;insert&quot;) : (&quot;remove&quot;)
for (i = 0; p[i]; i++)
	container[method](p[i])</code></pre>

<p>好~結束、其實是一些雕蟲小技喇~ 只是讓code看的順眼一些而已、也不見得效能比較好…而且、硬是要把這樣的東西套進去、有時候也很煩，說不定、有些人還會看的雲裡霧裡…||| 是說、因為我很懶咩~連複製也不想了、更不想看到一堆東西、看到眼花。(年紀大了、眼神就慢慢的不好了~)</p>

<p>[註]</p>

<p>雖然、這個還有進階版、不過~就大型了一點、迷有那摸小巧歐~就先擺著不說了，而且、也不是適合在每種語言喇~有點小挑…。 上面的code裡面、還埋藏著<strong>邪惡</strong>的寫法、科科科科科 (掩嘴) 相信眼神十分銳利的大家一定會花現的~咯咯咯咯~</p>

<p>下次不知道講什摸好捏~一定要是那種小小的、沒幾句可以結束又可以發洩一下的好~ w 上次那篇、真的是…累阿~(揮汗)</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[圖學] 世界的組成]]></title>
    <link href="http://Ichi1234567.github.com/graphics/2012-05-12/world/"/>
    <updated>2012-05-12T00:00:00+08:00</updated>
    <id>http://Ichi1234567.github.com/graphics/2012-05-12/world</id>
    <content type="html"><![CDATA[<p>只要牽涉到任何跟幾何有關的、不把圖像畫出來，有時候真的很難發揮想像力了解細節。在3D場景中、其實…更增加了難度， 因為我們『看』到的是2D、無論是眼睛看到的、呈現到畫面的…我認為嚴~~~格的說起來、都算是2D，在這樣的情況下、 一般人類要撰寫相關的程式、真的是困難重重。特別是對於某些底子不那摸熟悉的人類來說、光是要了解如何呈現在畫面上 和一堆名詞就已經頭昏了、更不會去弄清楚它們最基礎的概念。而且我覺得、圖學其實是個非常綜合的一個領域。</p>
<!-- more -->
<p>對於已經很厲害的人類來說、那些對他們而言、已經成為身體的一部分了。所以~就來隨便講講、稍微提一下這些其實不是 那摸難懂得東西吧~ w</p>

<pre><code>viewport；

   (x, y)
      ┌────────────────────────────────────┐─
      |                                    |↑
      |                                    |
      |                                    |
      |                畫面                 |h
      |                                    |
      |                                    |
      |                                    |↓
      └────────────────────────────────────┘─
      |←                 w                →|</code></pre>

<p>上面，其實就是所謂的viewport的重要組成。這個…其實一般人類大概都很容易就可以了解~所謂的 viewport就是可視範圍，(x, y)並不一定要使用原點。 在openGL中、可以使用glViewport來設定(不知道有沒有記錯…有點遙遠的記憶了、可是又很懶的去找…|||)</p>

<p>在canvas中、可以使用setTransform和設定width還有height來決定viewport。</p>
<ol>
<li> <strong>座標系：</strong>不管是在2D或3D、其實…很多時候都是繞著座標轉換的結果、所以、認清楚當前作用的座標系、是很重要的。
   唔~以下講的、雖然有的書會有、可是…其實我不太記得正確的名稱了耶~ XDDD 又是個太遙遠的記憶、就~多多包含囉~ w
   在開始之前，請大家有一個觀念，我認為這個觀念非常的重要、那就是『自定義』和『相對』，所有的座標系、其實都是
   自定義的、他們之間的轉換都是相對的。(←可能有點抽象吼…|||) 可以回去翻翻、印象中大概是在高中時期，有的也許
   國中就會提過的、物理或數學…應該都有教過大家『相對位置』、『相對速度』…這類概念。在圖學裡面、這個概念我認為
   是非常重要的。它可以在你非常混亂的時候、幫助我們釐清這些該死的轉換。</li>
   
<li> <strong>世界座標系：</strong>這個座標系、其實非~~~常的好懂，當然、世界、也是自定義的~ XDDD 比如、要呈現一個房間的場景、
  當然…也就可以定義『這個房間』是一個『世界』。所以、我們也可以定義『一棟大樓』是個世界、完全就是根據需要的
  場合定義。也就是說、這個『世界』、並不是大家認為的狹義的世界、而是更廣泛的一個定義、可以說是『這一整個場景
  』，the whole scene。</li>

<li> <strong>物體座標系：</strong>應該說、對於世界來說、世界包含的<strong>物體</strong>，都有它自己的座標系，而這個就被我稱為物體座標系，
   我想、這樣應該比較好懂。嗯嗯、物體座標系也就是說，我們可以將任何獨立存在的、你想讓它獨立的物件，都可以有自
   己的座標系。比如：一個人、一隻小狗、一個盒子、一隻手錶、甚至是一個房間…等等，一般來說，我們會讓可以重複使用
   的物體是一個獨立的存在，這樣、在建立場景的時候，就可以很方便的clone它們到世界場景中。</li>

<li> <strong>相對系統：</strong>這個就有點像是、『由我看世界』、和『由他看世界』、看起來不一樣的意思，在這邊…要掌握好它、請
   務必…好好的、認真的、複習一下『相對位置』、這也是、大家在操作過程中最容易混亂的地方之一。</li>
</ol>
<p>我相信、就算講了這些、大家應該還是很混亂~ XDDD 啥阿、世界、物體、相對的…講了一堆、我還是不知道那是在幹麻~簡單 的講個過程：</p>

<p><strong>首先從一般操作繪圖軟體那樣的感覺著手：</strong><br /> 我們可能準備了很多很多的素材、這些素材、對於它自己來說、它就是一個世界、在它還沒有備放入任何場景裡面、 它就是一個世界。場景要建立了、有一個空白的畫布(世界產生)，把素材放入畫布、並修改它的大小、縮放…等等、 (這個地方…通常也是最容易讓大家感到困惑的地方)在openGL和canvas上得操作、大概會是長這樣的…。</p>

<ol>
<li>
<p><strong>openGL</strong></p>

<pre><code>// 儲存當前的資訊、進入到一個獨立繪圖作用域
GL.pushMatrix()
//開始local繪圖、也可以對它做transform，scale…等等操作、而不影響外部的樣貌
GL.Begin(GL_LINES)
	GL.Vertex3(0, 0, 0)
	GL.Vertex3(100, 100, 100)
GL.End()
//返回之前的領域、load之前push的資料
GL.popMatrix()</code></pre>
</li>

<li>
<p><strong>canvas</strong></p>

<pre><code>// 相當於pushMatrix
ctx.save();
// 繪圖
ctx.transform(scaleX, 0 , 0, scaleY, dx, dy);
ctx.beginPath();
	ctx.arc(x, y, r, 0, 2π, false);
	ctx.closePath();
// 相當於popMatrix
ctx.restore();</code></pre>
</li>
</ol>

<p>當在做視角切換的時候、那些的座標變換…是在上述繪圖的外層、在openGL上、有lookAt那類的可以使用、所以、並不會 顯得混亂，只需在自己並不混亂、那問題都不大。在canvas上、就比較麻煩了，因為它沒有像lookAt一樣的東西、一切 都是由transform、translate、scale和rotate所組成、所以、一不小心就會容易混亂，所以必須在本人非常清楚的知道 自己在幹麻、才不容易出錯。</p>

<p>接下來、一定會有人很好奇…阿~講了那摸久、一開始的viewport咧~一點用都沒用阿…它一點點都沒用到。對~它其實只在 設定我們看得到位置範圍、也就是說…在畫面都決定好了之後、要讓畫面呈現那一塊區域、就是使用viewport~當然、是在 世界座標系的基礎下，也就是說…假如~~我們在viewport裡面看不到東西、請仔細的觀察一下…世界座標系是在什摸樣的基礎 下。總不能、設定viewport(x, y, w, h)設定在(0, 0, 100, 100)、可是場景的內容都在範圍外，那樣當然是什摸都看不 到的歐~</p>

<p><strong>[註]</strong><br /> 也許、在使用viewport的時候、大家可能會不小心的陷入混亂，而且、邏輯上可能會有點難轉過去。在這邊…有個小小的 邪惡小技巧。viewport定好了之後、就不要在動它。而是使用translate，把場景移動到viewport範圍內、正所謂山不轉 路轉、路不轉人轉的咩~ w</p>

<p>這所有的前提、都建立在當事人不混亂歐~ 所以、當混亂了、請從頭run一遍、哪個東西在哪裡、就一目了然了歐~雖然 對於Lv. max強者來說是有點笨，對於Lv. min的初學者來說又有點麻煩，可是、我覺得無比的有用歐~ w</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如果世界是個離散空間]]></title>
    <link href="http://Ichi1234567.github.com/others/2012-05-09/dsapce/"/>
    <updated>2012-05-09T00:00:00+08:00</updated>
    <id>http://Ichi1234567.github.com/others/2012-05-09/dsapce</id>
    <content type="html"><![CDATA[<p>這是好前一陣子偷喵了超弦理論後、醞釀了好一陣子，好像有把零零散散的想法集合的跡象，然後、就來亂『掰』一通吧~ w</p>

<p>嗯、其實，我對超弦理論，還是不太了解~ w 可是、在找文章的時候、看到了以下的幾個東西，很有趣~ (不一定是跟超弦有關的啦~)</p>
<!-- more -->
<p>- 超弦將那些粒子視為都是因為振動所引起現象。</p>

<ul>
<li>利用超弦可以擴充到n維。</li>

<li>以&#8221;相對&#8221;的看法來看世界。以細繩為例，對人來說、它算是2維；對小螞蟻來說、它就算是3維了。那、再對更小的東西來說~是不是可以再繼續延伸一些?就有了這樣的想法。</li>
</ul>

<p>嗯、前陣子又複習了一下projection，3D合理的顯示在螢幕上 (3D → 2D)，雖然、3D mapping 到 2D、有不少方法，不過、在這邊、只認真的觀察projection。(我覺得很讚的網站： http://www.songho.ca/opengl/gl_projectionmatrix.html) 以xyz的3D空間來說、mapping到xy的2D平面空間上、在參考網站裡面的圖、發揮一點點想像力以及過往的經驗(小時候學的相似三角形的概念很像派上用場了?~ w)，我們可以知道、在mapping到平面中、關鍵在z軸。較遠的座標、mapping到最近的平面上、套上&#8221;相似&#8221;的看法與算法可以知道：</p>

<pre><code>將座標( x, y, z ) 投射到 z平面上可得
┌                   ┐                        ┌                          ┐
|    x     y     z  |          投影           |    x/z      y/z     1    |
└                   ┘      -----------&gt;      └                          ┘</code></pre>

<p>相信、有不少人在看computer graphics的應該還蠻常看到類似的東西~ w</p>

<p>綜合以上、我很大膽的隨便亂想：</p>

<ul>
<li>既然可以擴展到n維。 - 既然可以用以相似的概念下去發展。 - 雖然實數有連續性，但是每個數的的確確是獨立的存在。 - 最小粒子存在、生物由粒子組成。</li>
</ul>

<p>(一定有人會想、那樣人不就散掉了、以為自己是克洛克達爾阿~||| 可是、在我遙遠的印象中、粒子間也是有引力存在的、所以…應該、生物還是可以長成它該長得樣子…?)</p>

<p>根據上述的亂七八糟隨便亂想(XD)，假如這個世界真的是離散空間、一定可以有很多很妙的事情發生?~ XD</p>

<p>比如：</p>

<ul>
<li>真的像克洛克達爾那樣可以散開~ XDDD (不知道質能守恆有迷有成立耶~我好好奇…) - 而且、既然是離散空間…那~是不是代表著、在外力的驅使下、可以把物體粒子化、然後~重新組成(?)</li>

<li>那是不是就代表著…可以把物體粒子化後、在進行xx跳躍、那~移動速度就可以很快了耶~ 而且、可以粒子化、那~假如大家的組成都是一樣的…是不是代表~其實成為橡皮人不是夢想?~ XDDD 搞不好超人系和自然系的、在未來的某一天、可以模擬的出來耶~我好想模擬一下歐~ &gt; 3&lt; - 既然、什摸東西都模擬的出來、那~~食物可不可以模擬阿~不知道會不會有味道耶~假如、氣味也是一種粒子~那…應該也可以模擬?~ - 所以…人類和狗狗其實迷有什摸兩樣~~~~(大驚) 狗狗也可以變成恐龍~~~ (大誤)</li>
</ul>

<p>接踵而來的是…安全大概會更糟糕了吧~ XDDD||</p>

<p>我承認、這篇有99%是來亂的~ w 就、亂亂想咩~嗯嗯、人類因為懶惰和亂亂想而進步~所以，小助助對人類的進步提供了莫大的貢獻…歐耶、歐耶~ XDDD (←自我感覺十分良好)</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[weight ----- (1)]]></title>
    <link href="http://Ichi1234567.github.com/math/2012-05-08/weight1/"/>
    <updated>2012-05-08T00:00:00+08:00</updated>
    <id>http://Ichi1234567.github.com/math/2012-05-08/weight1</id>
    <content type="html"><![CDATA[<p>weight是個很常見、卻還蠻容易被忽略的一個小地方，因為…太容易、也太好使用了，可是、用來用去又那摸幾招、有時候還是覺得不太夠用。是個用的好就覺得上了天堂、用爛了、就…會有想要撞豆腐的心情~</p>

<pre><code>最常被拿來使用的、一定是 ----------&gt; 平均

    (1/n)*A1 + (1/n)*A2 + …… + (1/n)*A3</code></pre>
<!-- more -->
<pre><code>    把1.延伸一下，不難理解、這種方法拿來做soomth真的是簡單又方便，又很好理解、也算是蠻合理的
    很懶的想的時候、通常…平均是最常被拿來用的、誰讓他太順手了。

另一個也很常被拿來使用的、其實也非~~~常的常見、就是 ----------&gt; 佔有率(%)
這種的、可分成兩類，以最常見的，就是距離或範圍相關問題來說明。
[註] 在不慎重考慮、還有其他精細的條件下。

A. 勢力大 ----------&gt; 比例高 (eq. 圓餅圖、真的是夠夠常見了?~)
比如範圍越大、所需人力越多，現在共有A、B、C、D 四區，N個人、如何劃分人數較為合理
很明顯的 ： 

            total(簡稱T)： A + B + C + D
            A區 ： (A / T) * N
            B區 ： (B / T) * N
            C區 ： (C / T) * N
            D區 ： (D / T) * N


B. 勢力大 ----------&gt; 比例小 ()
比如距離越遠、耗費時間越多，共有A、B、C、D 四條路，候補路線的順序如何決定
這個也非常的明顯 ：

    A ： (1 / A)
    B ： (1 / B)
    C ： (1 / C)
    D ： (1 / D)
    依照大小排好、由大至小…就是候補順序由高至低的順序

    這種的、根據算法可以有非~~~常多的變形和利用… = =+ (←以後勤勞狀況再慢慢補~ w)
    以上述A例來說，以面積算、面積算法有很多、所以就可以套用在各種不同的場合。
    以上述B例來說，以長度算、最常見的延伸例子就是linear interpolation、以linear延伸、就可以套用各種不同的ease function 或者任何想得到的、簡單的、符合情況的算法做變化。
    這些東西的作用域、當然也可以不限定在座標系或長度這類的空間上、而是可以適用在任何在合理情況下轉換到類似系統的、都是可行的。(←這樣、可以使用的範圍就更廣了?~ = =+)</code></pre>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[canvas] transform、setTransform]]></title>
    <link href="http://Ichi1234567.github.com/canvas/2012-05-04/canvas-transform-settransform/"/>
    <updated>2012-05-04T00:00:00+08:00</updated>
    <id>http://Ichi1234567.github.com/canvas/2012-05-04/canvas-transform-settransform</id>
    <content type="html"><![CDATA[<p>canvas有2個長得很像的method，分別是transform和setTransform，他們的parameter都一樣，可是、他們的功能又有些微的差異，對此做了小小的紀錄。</p>

<p>同：</p>

<p>皆是對&#8221;canvas&#8221;做transform的動作。 參數相同。</p>

<p>異：</p>

<p>transform會持續的累積所有對canvas的操作、包含了scale，rotate， translate，當然…還有transform。 但是、setTransform並不會累積操作。也就是說…使用了setTransform的意思是說，先將canvas做reset，回到最初的狀態，接著再做transform。 <!-- more --> tips： 利用setTransform會將canvas做reset的特性、我覺得在下面的情況下可以有很好的使用。</p>

<pre><code>拿來做lookAt。
lookAt是要將視線焦點移到某座標的方法，也就是說，當我們要lookAt某位置的時候、整體的操作將會重頭開始。當然、transform也是可以達到相同的效果。只是、我的習慣是傾向於lookAt後、整體會重新開始、而不受之前的影響。
clearRect的前置動作。
一般來說，清除畫布，都會使用clearRect(x, y, w, h)，x, y 為清除的起始位置，w, h分別是width和height，可是，當整個繪圖的過程充斥著對canvas的操作時，會因為很難確定x, y而可能導致進行清除的動作有困難或清除位置有錯。因此、在使用clearRect前，可以先setTransform。

&gt;   ctx.setTransform(1, 0, 0, 1, 0, 0);
&gt;   ctx.clearRect(0, 0, w, h);</code></pre>]]></content>
  </entry>
  
</feed>
